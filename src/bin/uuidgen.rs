#![deny(warnings)]

extern crate uuid;
extern crate rand;
extern crate extra;

use std::env;
use std::fs;
use std::io::{Read, Write};
use std::io;
use std::process;
use std::time;
use rand::Rand;

use extra::option::OptionalExt;
use extra::io::WriteExt;

static MAN_PAGE: &'static str = /* @MANSTART{uuidgen} */ r#"
NAME
    uuidgen - generates a UUID

SYNOPSIS
    uuidgen [OPTIONS]

DESCRIPTION
    This utility generates a universally unique identifier (UUID). A UUID is a
    unique 128-bit number, stored as 16 octets. The uniqueness property is not
    strictly guaranteed, however for all practical purposes, it can be assumed
    that an unintentional collision would be extremely unlikely.

    The UUIDs generated by uuidgen are either time-based UUIDs or random-based
    UUIDs. By default random-based UUIDs are generated.

OPTIONS
    -r, --random
        Generates a random-based UUID.
    -t, --time
        Generates a UUID based on time.
    -h, --help,
        Prints this manual page and exits.

"#; /* @MANEND */

fn main() {
    let args = env::args();
    let stdout = io::stdout();

    let mut stdout = stdout.lock();
    let mut stderr = io::stderr();

    let mut generate_random = true;

    for arg in args.skip(1) {
        match arg.as_str() {
            // Exit after displaying help
            "-h" | "--help" => {
                stdout.writeln(MAN_PAGE.as_bytes()).try(&mut stderr);
                stdout.flush().try(&mut stderr);
                process::exit(0);
            },
            "-r" | "--random" => {
                generate_random = false;
            },
            "-t" | "--time" => {
                generate_random = true;
            },
            _ => {
                stderr.write(b"Unknown option: ").try(&mut stderr);
                stderr.writeln(arg.as_bytes()).try(&mut stderr);
                let _ = stderr.flush();
                process::exit(1);
            }
        }
    }

    if !generate_random {
        // Get MAC address
        let mut file = fs::File::open("/etc/net/mac").unwrap();
        let mut contents = String::new();
        file.read_to_string(&mut contents).unwrap();

        // Node ID is 6 bytes, so MAC address will need to be converted
        let mut node_id = Vec::<u8>::new();

        for i in contents.split("-") {
            node_id.push(u8::from_str_radix(i, 16).unwrap());
        }

        let now = time::SystemTime::now();
        let context = uuid::UuidV1Context::rand(&mut rand::StdRng::new().unwrap());
        let u = uuid::Uuid::new_v1(&context, now.elapsed().unwrap().as_secs(), now.elapsed().unwrap().subsec_nanos(), node_id.as_slice()).unwrap();
        stdout.writeln(u.urn().to_string().as_bytes()).try(&mut stderr);
    }
    else {
        let u = uuid::Uuid::new_v4();
        stdout.writeln(u.urn().to_string().as_bytes()).try(&mut stderr);
    }
}
